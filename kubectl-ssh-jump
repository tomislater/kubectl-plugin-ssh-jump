#!/usr/bin/env bash

[[ -n $DEBUG ]] && set -x -e

PLUGIN_DIR="${HOME}/.kube/kubectlssh"
PLUGIN_SSH_OPTIONS_FILE="${PLUGIN_DIR}/options"
MAX_POD_CREATION_TIME=10   # unit: second
SSH_AGENT_ENV_FILE="${PLUGIN_DIR}/sshagent-env"
SSH_AGENT_PID_FILE="${PLUGIN_DIR}/sshagent-pid"
RANDOM_POD_NAME=$(xxd -l 16 -c 16 -p < /dev/random)
LOCAL_PORT=2222

help(){
  echo "Usage: "
  echo "  kubectl ssh-jump <dest_node> [options]"
  echo ""
  options
}

options(){
  cat <<"EOF"
Options:
  <dest_node>                     Destination node name or IP address
                                  dest_node must start from the following letters:
                                  ASCII letters 'a' through 'z' or 'A' through 'Z',
                                  the digits '0' through '9', or hyphen ('-')
  -u, --user <sshuser>            SSH User name
  -i, --identity <identity_file>  Identity key file, or PEM(Privacy Enhanced Mail)
  -P, --port <port>               SSH port for target node SSH server (default:22)
  -a, --args <args>               Args to exec in ssh session
  -h, --help                      Show this message

Example:
  $ kubectl ssh-jump -u admin -i ~/.ssh/mykey.pem rabbit.internal.prod

EOF
}

read_options(){
  if [[ -f "${PLUGIN_SSH_OPTIONS_FILE}" ]]; then
    source ${PLUGIN_SSH_OPTIONS_FILE}
  fi  
}

write_options(){
  local sshuser="$1"
  local identity="$2"
  local port="$3"

  cat << EOF > ${PLUGIN_SSH_OPTIONS_FILE}
sshuser=${sshuser}
identity=${identity}

port=${port}
EOF
}

cleanup_sshjump_pod(){
  echo "Clearning up SSH Jump host (Pod)..."
  kubectl delete pod $RANDOM_POD_NAME --grace-period 0
}

run_ssh_node(){
  local destnode="$1"
  local sshuser="$2"
  local identity="$3"
  local port="$4"
  local sshargs="$5"

  # Install an SSH Server if not yet installed
  echo "Creating SSH jump host (Pod)..."
  cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: $RANDOM_POD_NAME
  labels:
    env: test
spec:
  containers:
  - name: sshjump
    image: corbinu/ssh-server
    ports:
    - containerPort: 22
  nodeSelector:
    "kubernetes.io/os": linux
EOF

  # Wait until sshjump gets ready
  c=1
  while [[ ${c} -le $(( MAX_POD_CREATION_TIME * 10 )) ]];
  do
    pod_status=$(kubectl get pod $RANDOM_POD_NAME 2>/dev/null | tail -1 | awk '{print $3}')
    if [ "${pod_status}" = "Running" ]; then
      break
    fi
    (( c++ ))
    sleep 0.1
  done

  local identity_sshjump=${identity}
  local pubkey_sshjump=${pubkey}
  
  # Generate temp private/public key to ssh to the sshjump if the pubkey isn't given
  identity_sshjump=${PLUGIN_DIR}/id_rsa_sshjump
  pubkey_sshjump=${PLUGIN_DIR}/id_rsa_sshjump.pub
  if [ ! -f "${pubkey_sshjump}" ]; then
    echo "Generating nopass SSH pri/pub key to ssh to the sshjump ..."
    ssh-keygen -t rsa -f ${identity_sshjump} -N '' > /dev/null
  fi

  # Setup portforward
  # "lock" mechanism
  while [ -f "${PLUGIN_DIR}/${LOCAL_PORT}.lock" ]; do
      (( LOCAL_PORT++ ))
  done
  touch ${PLUGIN_DIR}/${LOCAL_PORT}.lock

  kubectl port-forward ${RANDOM_POD_NAME} ${LOCAL_PORT}:22 2>/dev/null &
  pid_port_forward=$!

  # Inject public SSH key to sshjump
  cat ${pubkey_sshjump} | \
    kubectl exec -i ${RANDOM_POD_NAME} -- /bin/bash -c "cat > /root/.ssh/authorized_keys"

  # Using the SSH Server as a jumphost (via port-forward proxy), ssh into the desired Node
  ssh -i ${identity} -p ${port} ${sshuser}@${destnode} \
    -o "ProxyCommand ssh root@127.0.0.1 -p ${LOCAL_PORT} -i ${identity_sshjump} -o \"StrictHostKeyChecking=no\" \"nc %h %p\"" \
    -o "StrictHostKeyChecking=no" ${sshargs}

  # Stop port-forward
  kill -3 ${pid_port_forward} 2>/dev/null

  rm -f ${PLUGIN_DIR}/${LOCAL_PORT}.lock
}

plugin_main() {
  while [ $# -gt 0 ] ; do
    nSkip=1
    case $1 in
      "-h" | "--help")
	help
	exit 0
	;;
      "-u" | "--user" )
	c_sshuser=$2
	nSkip=2
	;;
      "-i" | "--identity" )
	c_identity=$2
	nSkip=2
	;;
      "-P" | "--port")
	c_port=$2
	nSkip=2
	;;
      "-a" | "--args" )
	sshargs="$2"
	nSkip=2
	;;
      [0-9a-zA-Z-]*)
	destnode=$1
	;;
      *)
	help >&2
	exit 1
	;;
    esac
    shift $nSkip
  done

  if [[ "$(type kubectl &>/dev/null; echo $?)" -eq 1 ]]; then
    echo "Error: missing kubectl command" >&2
    echo "Please install kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/)" >&2
    exit 1
  fi

  if [ ! -d ${PLUGIN_DIR} ]; then
    mkdir -p ${PLUGIN_DIR}
  fi

  read_options

  if [ ! -n "${c_sshuser}" ]; then
    if [ ! -n "${sshuser}" ]; then
      c_sshuser="${USER}"  # default: Current executing user
    fi
    echo "using: sshuser=${sshuser}"
    c_sshuser="${sshuser}"
  fi

  if [ ! -f "${c_identity}" ]; then
    if [ ! -f "${identity}" ]; then
      echo "Error: identity file is required" >&2
      help >&2
      exit 1
    fi
    echo "using: identity=${identity}"
    c_identity="${identity}"
  fi

  if [ ! -n "${c_port}" ]; then
    if [ ! -n "${port}" ]; then
      port="22"    # default: 22
    fi
    echo "using: port=${port}"
    c_port="${port}"
  fi

  if [ "${sshargs}" != "" ]; then
    echo "using: args=${sshargs}"
  fi

  # Caching current ssh options
  write_options "${c_sshuser}" "${c_identity}" "${c_port}"

  # SSH Logging into desitnation node via Jump host
  run_ssh_node "${destnode}" "${c_sshuser}" "${c_identity}" "${c_port}" "${sshargs}"

  cleanup_sshjump_pod
}

plugin_main "$@"
